{"version":3,"sources":["components/Logo/brain.png","serviceWorker.js","components/Navigation/Navigation.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","components/FaceRecognition/FaceRecognition.js","components/Signin/Signin.js","components/Register/Register.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Navigation","onRouteChange","isSignedIn","style","display","justifyContent","onClick","className","Logo","options","max","width","height","src","brain","alt","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","Rank","name","entries","FaceRecognition","imageUrl","box","id","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Signin","props","onEmailChange","event","setState","signInEmail","target","value","onPasswordChange","signInPassword","onSubmitSignIn","fetch","method","headers","body","JSON","stringify","email","state","password","then","response","json","user","loadUser","this","htmlFor","href","React","Component","Resgister","onNameChange","particlesOptions","particles","number","density","enable","value_area","initialState","input","route","joined","App","data","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","count","Object","assign","catch","console","log","err","params","Register","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.24a95ee2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.45a2f0b8.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Navigation = ({onRouteChange, isSignedIn}) => {\r\n  if(isSignedIn) {\r\n    return (\r\n      <nav style={{ display:'flex', justifyContent: 'flex-end'}}>\r\n        <p onClick={() => onRouteChange('signout')} className='f3 link dim black underline pa3 pointer'>Sign Out</p>\r\n      </nav>\r\n    )\r\n  } else {\r\n    return(\r\n      <nav style={{ display:'flex', justifyContent: 'flex-end'}}>\r\n        <p onClick={() => onRouteChange('signin')} className='f3 link dim black underline pa3 pointer'>Sign In</p>\r\n        <p onClick={() => onRouteChange('register')} className='f3 link dim black underline pa3 pointer'>Register</p>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport brain from './brain.png'\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className='ma4 mt0'>\r\n      <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 55 }} style={{  width: 250,\r\n        height: 250}}>\r\n        <div className=\"Tilt-inner\">\r\n          <img src={brain} alt='Logo'/>\r\n        </div>\r\n      </Tilt>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\n\r\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) => {\r\n  return (\r\n    <div>\r\n      <p className='f3'>\r\n        {'This magic brain will detect faces in your pictures. Give it a try. Now thats what you call Big Brain'}\r\n      </p>\r\n      <div className='center'>\r\n        <div className='form center pa4 br3 shadow-5'>\r\n          <input className='f4 pa2 w-70 center' type='text' onChange={onInputChange}/>\r\n          <button\r\n            className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple'\r\n            onClick={onButtonSubmit}\r\n          >Detect</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageLinkForm;\r\n","import React from 'react';\r\n\r\nconst Rank = ({name, entries}) => {\r\n  return (\r\n    <div>\r\n      <div className='white f3'>\r\n        {`${name} , your current entries count...`}\r\n      </div>\r\n      <div className='white f1 '>\r\n        {entries}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Rank\r\n","import React from 'react';\r\nimport './FaceRecognition.css'\r\n\r\nconst FaceRecognition = ({imageUrl, box}) => {\r\n  return(\r\n    <div className='center ma'>\r\n      <div className='absolute mt5'>\r\n        <img id='inputimage' alt='' src={imageUrl} width='500px' height='auto'/>\r\n        <div className='boundary-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FaceRecognition;\r\n","import React from 'react';\r\n\r\nclass Signin extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      signInEmail: '',\r\n      signInPassword: ''\r\n    }\r\n  }\r\n\r\n  onEmailChange = (event) => {\r\n    this.setState({signInEmail: event.target.value})\r\n  }\r\n\r\n  onPasswordChange = (event) => {\r\n    this.setState({signInPassword: event.target.value})\r\n  }\r\n\r\n  onSubmitSignIn = () => {\r\n    fetch('http://localhost:3000/signin',{\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify(({\r\n        email: this.state.signInEmail,\r\n        password: this.state.signInPassword\r\n      }))\r\n    })\r\n    .then(response => response.json())\r\n    .then(user => {\r\n       if(user.id){\r\n         this.props.loadUser(user);\r\n         this.props.onRouteChange('home');\r\n       }\r\n     })\r\n  }\r\n\r\n\r\n  render(){\r\n    const { onRouteChange } = this.props;\r\n    return(\r\n      <article className=\"br2 ba dark-gray b--black-10 mv4 w-100 w-50-m w-25-l mw6 center\">\r\n        <main className=\"pa4 black-80\">\r\n          <div className=\"measure\">\r\n            <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n              <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                <input\r\n                  onChange={this.onEmailChange}\r\n                  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"email\"\r\n                  name=\"email-address\"\r\n                  id=\"email-address\" />\r\n              </div>\r\n              <div className=\"mv3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                <input\r\n                  className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  onChange={this.onPasswordChange}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <div className=\"\">\r\n              <input\r\n                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                type=\"submit\"\r\n                value=\"Sign in\"\r\n                onClick={this.onSubmitSignIn}\r\n              />\r\n            </div>\r\n            <div className=\"lh-copy mt3\">\r\n              <p\r\n                href=\"#0\"\r\n                className=\"f5 link dim black db pointer\"\r\n                onClick={() => onRouteChange('register')}\r\n              >Register</p>\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signin;\r\n","import React from 'react';\r\n\r\nclass Resgister extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n      name: ''\r\n    }\r\n  }\r\n\r\n  onEmailChange = (event) => {\r\n    this.setState({email: event.target.value})\r\n  }\r\n\r\n  onNameChange = (event) => {\r\n    this.setState({name: event.target.value})\r\n  }\r\n\r\n  onPasswordChange = (event) => {\r\n    this.setState({password: event.target.value})\r\n  }\r\n\r\n  onSubmitSignIn = () => {\r\n    fetch('http://localhost:3000/register',{\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify(({\r\n        email: this.state.email,\r\n        password: this.state.password,\r\n        name: this.state.name\r\n      }))\r\n    })\r\n    .then(response => response.json())\r\n    .then(user => {\r\n      if (user.id){\r\n        this.props.loadUser(user)\r\n        this.props.onRouteChange('home')\r\n      }\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <article className=\"br3 ba dark-gray b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n        <main className=\"pa4 black-80\">\r\n          <div className=\"measure\">\r\n            <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n              <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Full Name</label>\r\n                <input\r\n                  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  id=\"name\"\r\n                  onChange={this.onNameChange}\r\n                />\r\n              </div>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                <input\r\n                  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"email\"\r\n                  name=\"email-address\"\r\n                  id=\"email-address\"\r\n                  onChange={this.onEmailChange}\r\n                />\r\n              </div>\r\n              <div className=\"mv3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                <input\r\n                  className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  onChange={this.onPasswordChange}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <div className=\"\">\r\n              <input\r\n                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f5 dib\"\r\n                type=\"submit\"\r\n                value=\"Register\"\r\n                onClick={this.onSubmitSignIn}\r\n              />\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Resgister;\r\n","import React from 'react';\nimport Particles from 'react-particles-js'\n\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation.js';\nimport Logo from './components/Logo/Logo.js';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm.js';\nimport Rank from './components/Rank/Rank.js';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition.js';\nimport Signin from './components/Signin/Signin.js';\nimport Register from './components/Register/Register.js';\n\nconst particlesOptions = {\n  particles: {\n    number:  {\n      value: 120,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n}\n\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  box: {},\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: ''\n  }\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'signin',\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        entries: 0,\n        joined: ''\n      }\n    }\n  }\n\n  loadUser = (data) => {\n    this.setState({user:{\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      entries: data.entries,\n      joined: data.joined\n    }})\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height- (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    this.setState({box: box});\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value})\n  }\n\n  onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input})\n    fetch('http://localhost:3000/imageurl', {\n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        input: this.state.input\n      })\n    })\n    .then(response => response.json())\n    .then(response => {\n      if (response) {\n        fetch('http://localhost:3000/image', {\n          method: 'put',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            id: this.state.user.id\n          })\n        })\n        .then(response => response.json())\n        .then(count => {\n          this.setState(Object.assign(this.state.user,{ entries: count }))\n        })\n        .catch(console.log)\n      }\n      this.displayFaceBox(this.calculateFaceLocation(response))\n    })\n    .catch(err => console.log(err))\n  }\n\n  onRouteChange = (route) => {\n    if (route==='signout'){\n      this.setState(initialState);\n    } else if (route==='home'){\n      this.setState({isSignedIn: true});\n    }\n    this.setState({route: route});\n  }\n\n  render() {\n    const { isSignedIn, imageUrl, route, box } = this.state;\n    return (\n      <div className=\"App\">\n        <Particles\n          className='particles'\n          params={particlesOptions}\n        />\n      <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange}/>\n        { route === 'home'\n          ? <div>\n              <Logo />\n               <Rank name={this.state.user.name} entries={this.state.user.entries}/>\n              <ImageLinkForm\n                onInputChange={this.onInputChange}\n                onButtonSubmit={this.onButtonSubmit}\n              />\n              <FaceRecognition box={box} imageUrl={imageUrl}/>\n            </div>\n          : ( this.state.route === 'signin'\n            ? <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange}\n            onButtonSubmit={this.onButtonSubmit} />\n          : <Register onRouteChange={this.onRouteChange} loadUser={this.loadUser}/>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons'\n\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}